import{_ as a,c as n,a0 as e,o as p}from"./chunks/framework.P9qPzDnn.js";const r="/assets/project-struct.BwkrnEoO.png",t="/assets/jave-sdk-1.8.DZHz1bmR.png",l="/assets/maven-build.3bAAXd8l.png",i="/assets/nameserver-start.DxfvnvU4.png",c="/assets/ROCKETMQ_HOME.-FjfMRpM.png",o="/assets/broker-config.BO47PB1N.png",m="/assets/product-result.Di9SdynH.png",f=JSON.parse('{"title":"源码环境搭建","description":"","frontmatter":{},"headers":[],"relativePath":"rocketmq/start.md","filePath":"rocketmq/start.md"}'),b={name:"rocketmq/start.md"};function d(u,s,h,k,g,v){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="源码环境搭建" tabindex="-1">源码环境搭建 <a class="header-anchor" href="#源码环境搭建" aria-label="Permalink to &quot;源码环境搭建&quot;">​</a></h1><h2 id="源码下载" tabindex="-1">源码下载 <a class="header-anchor" href="#源码下载" aria-label="Permalink to &quot;源码下载&quot;">​</a></h2><p>直接上rocketmq的<a href="https://github.com/apache/rocketmq" target="_blank" rel="noreferrer">github</a>下载rocketmq源码，使用git下载</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://github.com/apache/rocketmq.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果无法下载可以使用github代理加速，下面提供一个：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://ghp.ci/https://github.com/apache/rocketmq.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>截止到2024-12-05，最新的rocketmq的版本为5.3.1，切换到该分支</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout -b release-5.3.1 origin/release-5.3.1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="源代码的目录结构" tabindex="-1">源代码的目录结构 <a class="header-anchor" href="#源代码的目录结构" aria-label="Permalink to &quot;源代码的目录结构&quot;">​</a></h2><p>rocketmq的源码目录结构如下所示：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rocketmq %  tree -L 1 -d</span></span>
<span class="line"><span>├── acl			# 权限控制模块</span></span>
<span class="line"><span>├── auth		# 认证模块</span></span>
<span class="line"><span>├── bazel</span></span>
<span class="line"><span>├── broker  # broker模块</span></span>
<span class="line"><span>├── client  # 消息客户端，包括消息生产者跟消息消费者相关类</span></span>
<span class="line"><span>├── common	# 公共模块</span></span>
<span class="line"><span>├── container</span></span>
<span class="line"><span>├── controller</span></span>
<span class="line"><span>├── dev			# 开发者信息，非代码模块</span></span>
<span class="line"><span>├── distribution	# 部署信息模块，存放搭建rocketmq集群常用的配置文件</span></span>
<span class="line"><span>├── docs		# rocketmq的文档说明</span></span>
<span class="line"><span>├── example	# rocketmq示例代码</span></span>
<span class="line"><span>├── filter	# 消息过滤相关基础类</span></span>
<span class="line"><span>├── namesrv	# namesrv相关代码</span></span>
<span class="line"><span>├── openmessaging	# 消息开放标准</span></span>
<span class="line"><span>├── proxy		# rocketmq proxy代理模块，TODO</span></span>
<span class="line"><span>├── remoting	# 远程通信模块，基于Netty</span></span>
<span class="line"><span>├── srvutil	# 服务器工具类</span></span>
<span class="line"><span>├── store		# 消息储存模块，核心模块，存储rocketmq的消息</span></span>
<span class="line"><span>├── style		# checkstyle相关实现</span></span>
<span class="line"><span>├── test		# 测试相关类</span></span>
<span class="line"><span>├── tieredstore</span></span>
<span class="line"><span>└── tools		# 工具类</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="idea调试rocketmq源码" tabindex="-1">IDEA调试rocketmq源码 <a class="header-anchor" href="#idea调试rocketmq源码" aria-label="Permalink to &quot;IDEA调试rocketmq源码&quot;">​</a></h2><p>使用IDEA打开rocketmq目录，等待maven下载依赖完毕。</p><h3 id="jdk环境配置" tabindex="-1">JDK环境配置 <a class="header-anchor" href="#jdk环境配置" aria-label="Permalink to &quot;JDK环境配置&quot;">​</a></h3><p>由于rocketmq是基于Java1.8写的，先将项目的SDK环境设置为1.8。点击IDEA上面的文件-&gt;项目结构。</p><img src="`+r+'" width="350" alt="project-struct"><p>项目的SDK设置为1.8。语言级别调整为SDK默认值</p><img src="'+t+'" width="500" alt="jave-sdk-1.8"><h3 id="maven构建项目" tabindex="-1">maven构建项目 <a class="header-anchor" href="#maven构建项目" aria-label="Permalink to &quot;maven构建项目&quot;">​</a></h3><p>点击IDEA右侧的maven按钮，界面如下所示</p><img src="'+l+'" width="450" alt="maven-build"><h3 id="源码测试" tabindex="-1">源码测试 <a class="header-anchor" href="#源码测试" aria-label="Permalink to &quot;源码测试&quot;">​</a></h3><p><strong>启动nameserver</strong></p><p><img src="'+i+'" alt="nameserver-start"></p><p>在rocketmq-namesrv模块中找到NamesrvStartup模块，找到main函数左边的启动按钮，鼠标右键，跳出上述选项，点击修改运行配置。</p><p><img src="'+c+`" alt="ROCKETMQ_HOME"></p><p>主要看环境变量，添加ROCKETMQ_HOME环境变量，值为rockermq源码的根目录，点击确定。然后右键执行namesrv即可。</p><p><strong>启动broker</strong></p><p>broker的前两步配置跟namesrv类似，找到broker的目录，在rocketmq-broker模块下面。不过broker除了配置环境变量之外，还要配置以下信息。 在根目录新建conf目录跟datadir目录，然后在conf目录下新建broker.conf文件，输入以下内容：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>brokerClusterName = DefaultCluster</span></span>
<span class="line"><span>brokerName = broker-a</span></span>
<span class="line"><span>brokerId = 0</span></span>
<span class="line"><span>deleteWhen = 04</span></span>
<span class="line"><span>fileReservedTime = 48</span></span>
<span class="line"><span>brokerRole = ASYNC_MASTER</span></span>
<span class="line"><span>flushDiskType = ASYNC_FLUSH</span></span>
<span class="line"><span></span></span>
<span class="line"><span>namesrvAddr = 127.0.0.1:9876</span></span>
<span class="line"><span>autoCreateTopicEnable = true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>storePathRootDir = /rocketmq/datadir	</span></span>
<span class="line"><span>storePathCommitLog = /rocketmq/datadir/commitlog # commitlog文件目录</span></span>
<span class="line"><span>storePathConsumeQueue = /rocketmq/datadir/consumequeue # consumequeue文件目录</span></span>
<span class="line"><span>storePathIndex = /rocketmq/datadir/index # indexFile文件目录</span></span>
<span class="line"><span>storeCheckPoint = /rocketmq/datadir/storeCheckPoint</span></span>
<span class="line"><span>abortFile = /rocketmq/datadir/abort</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在datadir目录下新建commitlog，consumequeue，index目录。 然后修改broker的运行配置。在程序参数下面输入-c，后面跟着broker.conf的文件路径</p><p><img src="`+o+'" alt="broker-config"></p><p>启动broker即可, 成功运行即可。</p><p><strong>启动生产者</strong></p><p>在example下的quickstart目录打开Producer文件，然后把下面的注释放开</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行即可。</p><p><img src="'+m+'" alt="product-result"></p><p>如果控制台有上面的打印，则说明源码已经成功运行。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>RocketMQ问题答疑官方网站点击<a href="https://rocketmq.io/faq/" target="_blank" rel="noreferrer">此处</a>访问</p></div>',40)]))}const _=a(b,[["render",d]]);export{f as __pageData,_ as default};
