import{_ as n,c as a,a0 as e,o as i}from"./chunks/framework.P9qPzDnn.js";const p="/assets/redis-server-config.BZQpZkxJ.png",l="/assets/redis-server-config-all.Bx2pfZ8x.png",r="/assets/debug.CTlgB19k.png",g=JSON.parse('{"title":"源码环境的搭建","description":"","frontmatter":{},"headers":[],"relativePath":"redis/start.md","filePath":"redis/start.md"}'),t={name:"redis/start.md"};function c(o,s,d,u,b,m){return i(),a("div",null,s[0]||(s[0]=[e('<h1 id="源码环境的搭建" tabindex="-1">源码环境的搭建 <a class="header-anchor" href="#源码环境的搭建" aria-label="Permalink to &quot;源码环境的搭建&quot;">​</a></h1><p>本篇主要介绍如果通过CLion来搭建redis的源码环境和调试redis的源码。</p><h2 id="下载redis源码" tabindex="-1">下载redis源码 <a class="header-anchor" href="#下载redis源码" aria-label="Permalink to &quot;下载redis源码&quot;">​</a></h2><p>通过git下载redis的源码，直接在github上搜索redis，将仓库克隆到本地。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://github.com/redis/redis.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>本系列文章主要讲解redis 7的源码，进入redis目录，使用git checkout切换到7.0目录</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout -b 7.0 origin/7.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="编译redis" tabindex="-1">编译redis <a class="header-anchor" href="#编译redis" aria-label="Permalink to &quot;编译redis&quot;">​</a></h2><p>执行gcc -v命令判断是否安装了gcc编译器，如果没有则执行以下命令安装。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xcode-select --install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>准备就绪后，进入redis的根目录，使用make编译项目的源代码</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make CFLAGS=&quot;-g -O0&quot; MALLOC=jemalloc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>CFLAGS=&quot;-g -O0&quot;表示不要优化代码，避免在Debug的时候，CLion里面的源码与实际的代码对应不上。如果编译过程遇到有什么库没有安装的错误，安装上即可。</p><h2 id="启动redis" tabindex="-1">启动redis <a class="header-anchor" href="#启动redis" aria-label="Permalink to &quot;启动redis&quot;">​</a></h2><p>在redis的根目录下使用以下命令启动redis，如果启动正常则表示编译成功。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>shengduiliang@liangchengduideMac-mini redis % ./src/redis-server ./redis.conf </span></span>\n<span class="line"><span>49193:C 09 Jan 2025 02:24:00.815 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span>\n<span class="line"><span>49193:C 09 Jan 2025 02:24:00.815 # Redis version=7.0.15, bits=64, commit=f35f36a2, modified=0, pid=49193, just started  runtest*            runtest-moduleapi*  sentinel.conf       tests/              </span></span>\n<span class="line"><span>49193:C 09 Jan 2025 02:24:00.815 # Configuration loaded</span></span>\n<span class="line"><span>49193:M 09 Jan 2025 02:24:00.815 * monotonic clock: POSIX clock_gettime</span></span>\n<span class="line"><span>                _._                                                  </span></span>\n<span class="line"><span>           _.-``__ &#39;&#39;-._                                             </span></span>\n<span class="line"><span>      _.-``    `.  `_.  &#39;&#39;-._           Redis 7.0.15 (f35f36a2/0) 64 bit</span></span>\n<span class="line"><span>  .-`` .-```.  ```\\/    _.,_ &#39;&#39;-._                                  </span></span>\n<span class="line"><span> (    &#39;      ,       .-`  | `,    )     Running in standalone mode</span></span>\n<span class="line"><span> |`-._`-...-` __...-.``-._|&#39;` _.-&#39;|     Port: 6379</span></span>\n<span class="line"><span> |    `-._   `._    /     _.-&#39;    |     PID: 49193</span></span>\n<span class="line"><span>  `-._    `-._  `-./  _.-&#39;    _.-&#39;                                   </span></span>\n<span class="line"><span> |`-._`-._    `-.__.-&#39;    _.-&#39;_.-&#39;|                                  </span></span>\n<span class="line"><span> |    `-._`-._        _.-&#39;_.-&#39;    |           https://redis.io       </span></span>\n<span class="line"><span>  `-._    `-._`-.__.-&#39;_.-&#39;    _.-&#39;                                   </span></span>\n<span class="line"><span> |`-._`-._    `-.__.-&#39;    _.-&#39;_.-&#39;|                                  </span></span>\n<span class="line"><span> |    `-._`-._        _.-&#39;_.-&#39;    |                                  </span></span>\n<span class="line"><span>  `-._    `-._`-.__.-&#39;_.-&#39;    _.-&#39;                                   </span></span>\n<span class="line"><span>      `-._    `-.__.-&#39;    _.-&#39;                                       </span></span>\n<span class="line"><span>          `-._        _.-&#39;                                           </span></span>\n<span class="line"><span>              `-.__.-&#39;                                               </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>49193:M 09 Jan 2025 02:24:00.817 # WARNING: The TCP backlog setting of 511 cannot be enforced because kern.ipc.somaxconn is set to the lower value of 128.</span></span>\n<span class="line"><span>49193:M 09 Jan 2025 02:24:00.817 # Server initialized</span></span>\n<span class="line"><span>49193:M 09 Jan 2025 02:24:00.818 * Ready to accept connections</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="clion调试源码" tabindex="-1">CLion调试源码 <a class="header-anchor" href="#clion调试源码" aria-label="Permalink to &quot;CLion调试源码&quot;">​</a></h2><p>使用CLion打开redis源码目录，在下拉菜单中选择redis-server。</p><img src="'+p+'" width="400" alt="redis-server-config"><p>点击右边的三个点，指定redis-server的配置和redis.conf的目录。</p><img src="'+l+'" width="600" alt="redis-server-config-all"><p>可执行文件选中项目下的redis-server可执行文件，程序实参填入$ProjectFileDir$/redis.conf</p><p>打开src/server.c文件，在该文件中的main方法里面打断点，然后debug启动redis-server。</p><img src="'+r+'" width="600" alt="debug"><p>如果程序卡在断点处，则说明环境搭建完成</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Mac M4系列一开始一直进不去断点，后面莫名其妙就可以了，不确定跟这个有没有关系: 在命令行中执行了brew install cmake</p></div><h2 id="源码结构" tabindex="-1">源码结构 <a class="header-anchor" href="#源码结构" aria-label="Permalink to &quot;源码结构&quot;">​</a></h2><p>我们来了解一下redis的源码的整体目录结构，形成全局的认识。</p><p><strong>deps</strong></p><p>这个目录包含了redis依赖的第三方代码库。</p><ul><li>jemallo: 内存分配器，默认情况下选择该内存分配器来代替Linux操作系统的libc-malloc</li><li>Hiredis： 官方C语言客户端</li><li>Linenoise： 读线替换</li><li>Lua： Lua语言的相关功能</li><li>hdr_histogram: 用于生成每个命令的延迟跟踪直方图</li></ul><p><strong>src</strong></p><p>这个目录是redis的源码目了，包括commands和modules两个子目录，以及其余模块的功能，这是redis最重要的目录</p><p><strong>test</strong></p><p>该目录下包含功能模块测试和单元测试的代码。</p><ul><li>Cluster: Redis集群功能测试</li><li>sentinel: 哨兵集群功能测试</li><li>Unit: 单元测试</li><li>Integration: 主从复制功能测试</li></ul><p>此外，还有assets，helps，modules和support 4个子目录，它们用来支撑测试功能</p><p><strong>utils</strong></p><p>包括辅助性功能的脚本或者代码，例如用于创建Redis集群的脚本，Lru算法效果展示代码等</p><p><strong>redis.conf</strong></p><p>redis的配置文件，核心文件，配置redis实例的参数</p><p><strong>sentinel.conf</strong></p><p>哨兵集群的配置文件</p>',43)]))}const _=n(t,[["render",c]]);export{g as __pageData,_ as default};
