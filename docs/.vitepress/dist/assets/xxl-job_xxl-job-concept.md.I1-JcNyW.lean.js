import{_ as a,a as n,b as l}from"./chunks/xxl-job-sample-task.DMqhNKwt.js";import{_ as p,c as e,a0 as i,o}from"./chunks/framework.P9qPzDnn.js";const t="/assets/executor-edit.AGWIhnbH.png",r="/assets/xxl-job-sample-task-detail-new.DkG_b554.png",c="/assets/scheduling-type.cuhaysyP.png",b="/assets/cron-choice.BvVPDnxL.png",x="/assets/job-config.BSZ7dtuz.png",u="/assets/glue-idea.DcXGFDmQ.png",m="/assets/higher-job-config.D9BmJ67h.png",A=JSON.parse('{"title":"xxl-job概念详解","description":"","frontmatter":{},"headers":[],"relativePath":"xxl-job/xxl-job-concept.md","filePath":"xxl-job/xxl-job-concept.md"}'),d={name:"xxl-job/xxl-job-concept.md"};function g(h,s,j,E,_,J){return o(),e("div",null,s[0]||(s[0]=[i('<h1 id="xxl-job概念详解" tabindex="-1">xxl-job概念详解 <a class="header-anchor" href="#xxl-job概念详解" aria-label="Permalink to &quot;xxl-job概念详解&quot;">​</a></h1><p>本章节让我们解释一下xxl-job相关的概念以及简单使用说明，在浏览器中访问<a href="http://localhost:8080/xxl-job-admin/" target="_blank" rel="noreferrer">http://localhost:8080/xxl-job-admin/</a> ，进入管理台网页</p><p><img src="'+a+'" alt="xxl-job-admin"></p><p>可以看到左边的栏目中有6个选项，分别是：</p><ul><li>运行报表：记录xxl-job的运行情况，包括任务数量，调度次数，执行器数量等</li><li>任务管理：记录xxl-job当前已经注册的任务，可以对任务做筛选和编辑等操作</li><li>调度日志：当xxl-job的任务定时时间到了，就会调度执行器进行处理，每次调度就会产生一个调度日志</li><li>执行器管理：记录当前已经添加了的执行器，可以对执行器做筛选，编辑和新增等操作</li><li>用户管理：管理当前已有的用户信息，可以新增用户，编辑用户权限等</li><li>使用教程：记录xxl-job的使用文档，包括github链接跟官方文档等。</li></ul><p>本章主要介绍任务管理跟执行器管理等跟具体任务相关的内容，其他几种可以说是补充，后面视情况讲解。</p><h2 id="执行器管理" tabindex="-1">执行器管理 <a class="header-anchor" href="#执行器管理" aria-label="Permalink to &quot;执行器管理&quot;">​</a></h2><p><img src="'+n+'" alt="xxl-job-executor-sample-executer.png"></p><p>执行器管理我们上章已经看到相应的内容，这里介绍一下执行器都是什么。点击示例执行器右边操作旁边的向下按钮，点击编辑。</p><img src="'+t+`" width="600" alt="executor-edit"><p>可以看到具体有四个选项可以提供配置(新增执行器类似)。</p><ol><li>名称: 执行器的名称，随便填，具有唯一性即可</li><li>注册方式: 有两种，分别是自动注册和手动注册</li></ol><ul><li>自动注册：当客户端连接上来的时候，根据AppName绑定执行器，无需指定IP</li><li>手动录入：手动指定执行器绑定的机器，适用于固定IP，不建议使用这种方式</li></ul><ol start="3"><li>AppName: 执行该执行器绑定的AppName，只有机器的AppName跟这里的一样，那么就说明机器是属于这个执行器的。</li></ol><p>我们打开上一章xxl-job-executor-sample-springboot的XxlJobConfig代码，可以看到注册了一个Executor：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Configuration</span></span>
<span class="line"><span>public class XxlJobConfig {</span></span>
<span class="line"><span>  @Bean</span></span>
<span class="line"><span>  public XxlJobSpringExecutor xxlJobExecutor() {</span></span>
<span class="line"><span>    logger.info(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;);</span></span>
<span class="line"><span>    XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();</span></span>
<span class="line"><span>    xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span></span>
<span class="line"><span>    // xxl-job-executor-sample</span></span>
<span class="line"><span>    xxlJobSpringExecutor.setAppname(appname);</span></span>
<span class="line"><span>    xxlJobSpringExecutor.setAddress(address);</span></span>
<span class="line"><span>    xxlJobSpringExecutor.setIp(ip);</span></span>
<span class="line"><span>    xxlJobSpringExecutor.setPort(port);</span></span>
<span class="line"><span>    xxlJobSpringExecutor.setAccessToken(accessToken);</span></span>
<span class="line"><span>    xxlJobSpringExecutor.setLogPath(logPath);</span></span>
<span class="line"><span>    xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return xxlJobSpringExecutor;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>由于appname是xxl-job-executor-sample，跟示例执行器对上了，所以属于示例执行器了。</p><h2 id="任务管理" tabindex="-1">任务管理 <a class="header-anchor" href="#任务管理" aria-label="Permalink to &quot;任务管理&quot;">​</a></h2><p>作为一个定时任务执行的框架，任务的定义是核心的概念，所以本章节讲解一下xxl-job的任务机制，看看都有哪些可以配置的地方。</p><p><img src="`+l+'" alt="xxl-job-sample-task"></p><p>打开任务调度中心，点击任务管理，来到任务管理界面。点击右上脚的新增按钮，新增一个定时任务。</p><p><img src="'+r+'" alt="xxl-job-sample-task-detail-new"></p><p>本章节主要解释一下上面这个框里面的每个配置项的内容和配置。</p><h3 id="基础配置" tabindex="-1">基础配置 <a class="header-anchor" href="#基础配置" aria-label="Permalink to &quot;基础配置&quot;">​</a></h3><ol><li>执行器（必填）：执行执行定时任务的执行器，就上面说到的执行器</li><li>任务描述（必填）：定时任务描述</li><li>负责人（必填）：定时任务的负责人</li><li>报警邮件（非必填）：当定时任务出错的时候，会发送报警邮件</li></ol><h3 id="调度配置" tabindex="-1">调度配置 <a class="header-anchor" href="#调度配置" aria-label="Permalink to &quot;调度配置&quot;">​</a></h3><p><img src="'+c+'" alt="scheduling-type"></p><p>调度类型有三种选择，具体如下：</p><ol><li>无，没有调度类型，说明不需调度，不会定时执行</li><li>CRON: 基于CRON表达式，当指定为CRON类型的时候，右边CRON可以输入表达式，也可以选择，当时间满足CRON表达式的时候调度任务 <img src="'+b+'" width="500" alt="cron-choice"></li><li>固定速度：按照固定速度调度定时任务，右边固定速度输入定时任务执行的周期（按秒算）</li></ol><h3 id="任务配置" tabindex="-1">任务配置 <a class="header-anchor" href="#任务配置" aria-label="Permalink to &quot;任务配置&quot;">​</a></h3><p><img src="'+x+'" alt="job-config"></p><p>可以看到运行模式有以下几种，因为我们是搞JAVA的，所以重点只看BEAN模式，跟GLUE(Java)即可。</p><ul><li>BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 &quot;JobHandler&quot; 属性匹配执行器中任务；</li><li>GLUE模式(Java)：任务以源码方式维护在调度中心；该模式的任务实际上是一段继承自IJobHandler的Java类代码并 &quot;groovy&quot; 源码方式维护，它在执行器项目中运行，可使用@Resource/@Autowire注入执行器里中的其他服务；</li><li>GLUE模式(Shell)：任务以源码方式维护在调度中心；任务实际上是一段&quot;shell&quot;脚本；</li><li>GLUE模式(Python)：任务以源码方式维护在调度中心；任务实际上是一段&quot;python&quot;脚本；</li><li>GLUE模式(PHP)：任务以源码方式维护在调度中心；任务实际上是一段&quot;php&quot;脚本；</li><li>GLUE模式(NodeJS)：任务以源码方式维护在调度中心；任务实际上是一段&quot;nodejs&quot;脚本；</li><li>GLUE模式(PowerShell)：任务以源码方式维护在调度中心；任务实际上是一段&quot;PowerShell&quot;脚本；</li></ul><p>我们上一节的测试案例用的就是BEAN模式，简单来说就是客户端声明一个JobHandler的处理方法，xxl-job负责定时调用。</p><p><img src="'+u+`" alt="glue-idea"></p><p>如果是GLUE模式的话，可以点击任务编辑的按钮们，然后点击GLUE-IDE查看JAVA的执行代码，默认会生成一段代码，可以做修改后保存。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package com.xxl.job.service.handler;</span></span>
<span class="line"><span>import com.xxl.job.core.context.XxlJobHelper;</span></span>
<span class="line"><span>import com.xxl.job.core.handler.IJobHandler;</span></span>
<span class="line"><span>public class DemoGlueJobHandler extends IJobHandler {</span></span>
<span class="line"><span>	@Override</span></span>
<span class="line"><span>	public void execute() throws Exception {</span></span>
<span class="line"><span>		XxlJobHelper.log(&quot;XXL-JOB, Hello World.&quot;);</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="高级配置" tabindex="-1">高级配置 <a class="header-anchor" href="#高级配置" aria-label="Permalink to &quot;高级配置&quot;">​</a></h3><p><img src="`+m+'" alt="higher-job-config"></p><p><strong>路由策略</strong></p><p>当执行器是使用集群部署的时候，调度哪个执行器来执行任务，这些策略就是路由策略，当前有以下策略：</p><ul><li>FIRST（第一个）：固定选择第一个机器；</li><li>LAST（最后一个）：固定选择最后一个机器；</li><li>ROUND（轮询）：；</li><li>RANDOM（随机）：随机选择在线的机器；</li><li>CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。</li><li>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；</li><li>LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举；</li><li>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；</li><li>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</li><li>SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</li></ul><p><strong>子任务ID</strong></p><p>每个任务都拥有一个唯一的任务ID(任务ID可以从任务列表获取)，当本任务执行结束并且执行成功时，将会触发子任务ID所对应的任务的一次主动调度。</p><p><strong>调度过期策略</strong></p><p>如果调度任务过期了，怎么处理该任务，有两种：</p><ul><li>忽略：调度过期后，忽略过期的任务，从当前时间开始重新计算下次触发时间；</li><li>立即执行一次：调度过期后，立即执行一次，并从当前时间开始重新计算下次触发时间；</li></ul><p><strong>阻塞处理策略</strong></p><p>调度过于密集执行器来不及处理时的处理策略；</p><ul><li>单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；</li><li>丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；</li><li>覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</li></ul><p><strong>任务超时时间</strong></p><p>支持自定义任务超时时间，任务运行超时将会主动中断任务；</p><p><strong>失败重试次数</strong></p><p>支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；</p><h2 id="xxl-job架构" tabindex="-1">xxl-job架构 <a class="header-anchor" href="#xxl-job架构" aria-label="Permalink to &quot;xxl-job架构&quot;">​</a></h2><p><img src="https://www.xuxueli.com/doc/static/xxl-job/images/img_Qohm.png" alt="xxl-job架构图"></p><p>这里引用官网的架构图，然后对xxl-job的框架设计做一下解释。</p><ul><li>执行器启动后通过注册服务往xxl-job注册执行器，保存入库</li><li>用户添加定时任务，执行任务执行时间和执行器等，保存入库</li><li>调度器模块定时查看定时任务是否需要执行，如果需要执行，则调度执行器进行执行</li><li>执行器执行完毕后通过回调服务向xxl-job汇报执行结果</li><li>XXL-JOB运行过程中产生的日志由日志服务进行实时记录</li></ul>',58)]))}const f=p(d,[["render",g]]);export{A as __pageData,f as default};
