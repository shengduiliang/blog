import{_ as n,c as a,a0 as e,o as p}from"./chunks/framework.P9qPzDnn.js";const l="/assets/monocloud.Yu487ggs.png",i="/assets/clash-link.DRtfKm1n.png",r="/assets/clash-for-windows.D3RCkFgP.png",c="/assets/config-yaml.tsAnkl5C.png",t="/assets/cri-dockerd.D0md6Mez.png",u="/assets/cri-docker.qLLuvQ_2.png",b="/assets/kubeadm-config.wAjbMEDq.png",o="/assets/nginx.oqthiMLo.png",C=JSON.parse('{"title":"ubuntu24.04 安装k8s1.30（基于cri-docker）","description":"","frontmatter":{},"headers":[],"relativePath":"k8s/install.md","filePath":"k8s/install.md"}'),d={name:"k8s/install.md"};function m(h,s,g,k,v,y){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="ubuntu24-04-安装k8s1-30-基于cri-docker" tabindex="-1">ubuntu24.04 安装k8s1.30（基于cri-docker） <a class="header-anchor" href="#ubuntu24-04-安装k8s1-30-基于cri-docker" aria-label="Permalink to &quot;ubuntu24.04 安装k8s1.30（基于cri-docker）&quot;">​</a></h1><p>本文主要介绍ubuntu24.04从零安装k8s 1.30版本，使用cri-docker + calico搭建</p><p>为了简单考虑，采用一主一从架构搭建，如果需要添加从机，参照worker操作即可</p><table tabindex="0"><thead><tr><th style="text-align:left;">配置</th><th style="text-align:center;">主机名</th><th style="text-align:center;">ip地址</th><th>角色</th></tr></thead><tbody><tr><td style="text-align:left;">2核2G</td><td style="text-align:center;">ubuntu200</td><td style="text-align:center;">192.168.147.200</td><td>master</td></tr><tr><td style="text-align:left;">2核2G</td><td style="text-align:center;">ubuntu201</td><td style="text-align:center;">192.168.147.201</td><td>worker</td></tr></tbody></table><h2 id="初始化环境" tabindex="-1">初始化环境 <a class="header-anchor" href="#初始化环境" aria-label="Permalink to &quot;初始化环境&quot;">​</a></h2><p>这部分介绍安装docker+k8s的前置操作，包括初始化IP，网络环境，分区交换等。</p><h3 id="设置固定ip地址" tabindex="-1">设置固定IP地址 <a class="header-anchor" href="#设置固定ip地址" aria-label="Permalink to &quot;设置固定IP地址&quot;">​</a></h3><p>参照下面重写/etc/netplan的50-cloud-init.yaml(文件名可能不一样)，ens160参照主机原文件，IP地址根据自己的IP来配置</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu1801:~$ sudo cat /etc/netplan/50-cloud-init.yaml </span></span>
<span class="line"><span># This file is generated from information provided by the datasource.  Changes</span></span>
<span class="line"><span># to it will not persist across an instance reboot.  To disable cloud-init&#39;s</span></span>
<span class="line"><span># network configuration capabilities, write a file</span></span>
<span class="line"><span># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span>
<span class="line"><span># network: {config: disabled}</span></span>
<span class="line"><span>network:</span></span>
<span class="line"><span>    ethernets:</span></span>
<span class="line"><span>        ens160:</span></span>
<span class="line"><span>            dhcp4: false</span></span>
<span class="line"><span>            addresses: </span></span>
<span class="line"><span>              - 192.168.147.200/24</span></span>
<span class="line"><span>            nameservers:</span></span>
<span class="line"><span>              addresses: [119.29.29.29, 114.114.114.114, 8.8.8.8]</span></span>
<span class="line"><span>            routes:</span></span>
<span class="line"><span>              - to: default</span></span>
<span class="line"><span>                via: 192.168.147.2     </span></span>
<span class="line"><span>    version: 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>然后执行sudo netplan apply，这时可以看到IP地址已经变化：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu1801:~$ sudo netplan apply</span></span>
<span class="line"><span>ubuntu@ubuntu1801:~$ ifconfig</span></span>
<span class="line"><span>ens160: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span></span>
<span class="line"><span>        inet 192.168.147.200  netmask 255.255.255.0  broadcast 192.168.147.255</span></span>
<span class="line"><span>        inet6 fe80::20c:29ff:fea7:b7f9  prefixlen 64  scopeid 0x20&lt;link&gt;</span></span>
<span class="line"><span>        ether 00:0c:29:a7:b7:f9  txqueuelen 1000  (Ethernet)</span></span>
<span class="line"><span>        RX packets 753767  bytes 1079056302 (1.0 GB)</span></span>
<span class="line"><span>        RX errors 0  dropped 0  overruns 0  frame 0</span></span>
<span class="line"><span>        TX packets 93485  bytes 25211257 (25.2 MB)</span></span>
<span class="line"><span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span></span>
<span class="line"><span>        device interrupt 44  memory 0x3fe00000-3fe20000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="设置主机名与dns映射" tabindex="-1">设置主机名与DNS映射 <a class="header-anchor" href="#设置主机名与dns映射" aria-label="Permalink to &quot;设置主机名与DNS映射&quot;">​</a></h3><p>主机名在后面初始化k8s的时候会用到</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu:~/k8s$ hostnamectl set-hostname ubuntu200</span></span>
<span class="line"><span>ubuntu@ubuntu:~/k8s$ bash</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>打开/etc/hosts，将主机跟从机的映射加进去：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ cat /etc/hosts</span></span>
<span class="line"><span>127.0.0.1 localhost</span></span>
<span class="line"><span>127.0.1.1 ubuntu200 #当前主机</span></span>
<span class="line"><span>192.168.147.200 ubuntu200 #master</span></span>
<span class="line"><span>192.168.147.201 ubuntu201 #worker</span></span>
<span class="line"><span></span></span>
<span class="line"><span># The following lines are desirable for IPv6 capable hosts</span></span>
<span class="line"><span>::1     ip6-localhost ip6-loopback</span></span>
<span class="line"><span>fe00::0 ip6-localnet</span></span>
<span class="line"><span>ff00::0 ip6-mcastprefix</span></span>
<span class="line"><span>ff02::1 ip6-allnodes</span></span>
<span class="line"><span>ff02::2 ip6-allrouters</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="同步时间" tabindex="-1">同步时间 <a class="header-anchor" href="#同步时间" aria-label="Permalink to &quot;同步时间&quot;">​</a></h3><p>如果系统时间不是东八区时间，将其改成东八区的时间</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ date</span></span>
<span class="line"><span>Thu Jul  4 09:04:03 PM CST 2024</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ timedatectl set-timezone Asia/Shanghai</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ date</span></span>
<span class="line"><span>Thu Jul  4 09:04:06 PM CST 2024</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同步阿里云的时间：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ sudo apt install ntpdate</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ ntpdate time1.aliyun.com</span></span>
<span class="line"><span>2024-07-04 21:33:28.625014 (+0800) +0.058696 +/- 0.026423 time1.aliyun.com 203.107.6.88 s2 no-leap</span></span>
<span class="line"><span>CLOCK: adj_systime: Operation not permitted</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="配置内核转发和网桥过滤" tabindex="-1">配置内核转发和网桥过滤 <a class="header-anchor" href="#配置内核转发和网桥过滤" aria-label="Permalink to &quot;配置内核转发和网桥过滤&quot;">​</a></h3><p>创建内核模块文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ modprobe overlay</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ modprobe br_netfilter</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>添加网桥过滤及内核转发配置文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ cat &lt;&lt; EOF | tee /etc/sysctl.d/k8s.conf</span></span>
<span class="line"><span>net.bridge.bridge-nf-call-ip6tables = 1</span></span>
<span class="line"><span>net.bridge.bridge-nf-call-iptables = 1</span></span>
<span class="line"><span>net.ipv4.ip_forward = 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>加载配置</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ sudo sysctl -p /etc/sysctl.d/k8s.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>加载内核参数</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ sudo sysctl --system</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装ipset及ipvsadm</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$: sudo apt install ipset ipvsadm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>配置 ipvsadm 模块加载, 添加需要加载的模块</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ cat &lt;&lt; EOF | tee /etc/modules-load.d/ipvs.conf</span></span>
<span class="line"><span>ip_vs</span></span>
<span class="line"><span>ip_vs_rr</span></span>
<span class="line"><span>ip_vs_wrr</span></span>
<span class="line"><span>ip_vs_sh</span></span>
<span class="line"><span>nf_conntrack</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>创建加载模块脚本文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$  cat &lt;&lt; EOF | tee /root/ipvs.sh</span></span>
<span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>modprobe -- ip_vs</span></span>
<span class="line"><span>modprobe -- ip_vs_rr</span></span>
<span class="line"><span>modprobe -- ip_vs_wrr</span></span>
<span class="line"><span>modprobe -- ip_vs_sh</span></span>
<span class="line"><span>modprobe -- nf_conntrack</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>执行脚本文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ sudo bash ipvs.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="关闭swap分区" tabindex="-1">关闭SWAP分区 <a class="header-anchor" href="#关闭swap分区" aria-label="Permalink to &quot;关闭SWAP分区&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ free -m</span></span>
<span class="line"><span>               total        used        free      shared  buff/cache   available</span></span>
<span class="line"><span>Mem:            1956        1234         114           4         703         722</span></span>
<span class="line"><span>Swap:              0           0           0</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ sudo swapoff -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果Swap分区打开了，关闭swap分区</p><h3 id="安装clash代理-选填" tabindex="-1">安装clash代理（选填） <a class="header-anchor" href="#安装clash代理-选填" aria-label="Permalink to &quot;安装clash代理（选填）&quot;">​</a></h3><p>由于国内现在对docker容器仓库限制很大，很难通过正常途径获取k8s需要的镜像，网上现在通用的阿里仓库用起来也是有问题的，一直安装不上calico镜像，所以本人通过在ubuntu上安装clash代理访问外网来解决这个问题。当然，如果有其他方式，可以忽略这部分内容。</p><ul><li>科学上网工具</li></ul><p>首先，我们需要用到科学上网工具，这里我用的是<a href="https://mymonocloud.com/" target="_blank" rel="noreferrer">monocloud</a>, 在里面购买一个套餐，然后点击套餐控制面板里面的订阅链接。</p><p><img src="`+l+'" alt="monocloud"></p><p>里面有clash链接，后面配置代理会用到。</p><p><img src="'+i+'" alt="clash-link"></p><p>如果会用shadowsocks也可以配置。由于本人用的是M1 MacOS（ARM架构），只能使用ubuntu server命令行，折腾了一整天，搞不定，各种各样的问题，放弃shadowsocks了。</p><ul><li>桌面端系统安装clash代理</li></ul><p>如果系统是桌面端的就简单了，直接下载Clash for Windows安装就可以了。具体下载链接如下：</p><p><a href="https://github.com/lantongxue/clash_for_windows_pkg/releases" target="_blank" rel="noreferrer">https://github.com/lantongxue/clash_for_windows_pkg/releases</a></p><p>选中自己系统的安装</p><p><img src="'+r+'" alt="Clash for windows"></p><p>本人用的是M1系统，下载dmg版本。打开软件，在上面输入框输入刚才monocloud的clash链接，就会生成一个yaml文件，使用该配置即可。</p><p><img src="'+c+`" alt="config.yaml"></p><ul><li>纯命令安装clash</li></ul><p>由于本人的ubuntu是纯命令行的，所以只能用命令行的方式解决。在主目录下创建一个clash目录，用来存放clash的相关文件.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ mkdir clash</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ cd clash</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/clash$ ls</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后执行以下指令，获得一个clash的执行文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ wget https://github.com/Kuingsmile/clash-core/releases/download/1.18/clash-linux-arm64-v1.18.0.gz \\</span></span>
<span class="line"><span>    &amp;&amp; gzip -d clash-linux-arm64-v1.18.0.gz \\</span></span>
<span class="line"><span>    &amp;&amp; chmod a+x clash-linux-arm64-v1.18.0 \\</span></span>
<span class="line"><span>    &amp;&amp; mv clash-linux-arm64-v1.18.0 clash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>clash的链接如下：<a href="https://github.com/Kuingsmile/clash-core/releases%EF%BC%8C" target="_blank" rel="noreferrer">https://github.com/Kuingsmile/clash-core/releases，</a> 选中自己的系统跟架构对应的包下载即可</p><p>然后将刚才clash-for-window生成的配置文件的内容（即红框部分），写入到clash目录的config.yaml里面，clash的目录如下所示：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/clash$ ls</span></span>
<span class="line"><span>clash  config.yaml</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/clash$ ./clash -d .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后执行./clash -d .即可，最终目录如下所示：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/clash$ ls</span></span>
<span class="line"><span>cache.db  clash  config.yaml  Country.mmdb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>由于这样在用代理访问链接的时候，控制台会有选代理站点的输出信息，所以推荐使用下面这种方式运行：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>screen -S clash /home/xxx/clash/clash -d /home/xxx/clash/</span></span>
<span class="line"><span># 运行后按 ctrl + a + d退出后台</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>使用代理</li></ul><p>可以用以下指令开启http跟https使用代理：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/clash$ export https_proxy=127.0.0.1:7890 &amp;&amp; export http_proxy=127.0.0.1:7890</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/clash$  curl -I www.google.com</span></span>
<span class="line"><span>HTTP/1.1 200 OK</span></span>
<span class="line"><span>Transfer-Encoding: chunked</span></span>
<span class="line"><span>Cache-Control: private</span></span>
<span class="line"><span>Connection: keep-alive</span></span>
<span class="line"><span>Content-Security-Policy-Report-Only: object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-PG7ebLDBzGSsHcQ8UoRdsw&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp</span></span>
<span class="line"><span>Content-Type: text/html; charset=ISO-8859-1</span></span>
<span class="line"><span>Date: Thu, 04 Jul 2024 14:10:33 GMT</span></span>
<span class="line"><span>Expires: Thu, 04 Jul 2024 14:10:33 GMT</span></span>
<span class="line"><span>Keep-Alive: timeout=4</span></span>
<span class="line"><span>P3p: CP=&quot;This is not a P3P policy! See g.co/p3phelp for more info.&quot;</span></span>
<span class="line"><span>Proxy-Connection: keep-alive</span></span>
<span class="line"><span>Server: gws</span></span>
<span class="line"><span>Set-Cookie: AEC=AVYB7coXJtAzDZDBANS3_PT3O0lyxVq5BpljcFokdlTFjrvVXdNfrc6d_pg; expires=Tue, 31-Dec-2024 14:10:33 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax</span></span>
<span class="line"><span>Set-Cookie: NID=515=JnZ5NseNl-xEAydptsgHPibhXhhYKTL5YYt-8bGyzD2WCsTCmtNSMDuAUW9TwCgbCP5SQK-aXZIssFCWcmNATFGUF_C0tpqE1nGYNQyq-10TQoZma0BoG-u8Qz1byUen-RUiLaZnOWwJDT3mKekC0Gqxor0t-ihqcZdMT5sORUw; expires=Fri, 03-Jan-2025 14:10:33 GMT; path=/; domain=.google.com; HttpOnly</span></span>
<span class="line"><span>X-Frame-Options: SAMEORIGIN</span></span>
<span class="line"><span>X-Xss-Protection: 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>可见配置成功。</p><p>可以用以下指令关闭http跟https使用代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/clash$: unset http_proxy https_proxy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="安装docker跟cri-docker" tabindex="-1">安装docker跟cri-docker <a class="header-anchor" href="#安装docker跟cri-docker" aria-label="Permalink to &quot;安装docker跟cri-docker&quot;">​</a></h2><p>接下来到安装docker跟cri-docker了</p><h3 id="安装docker" tabindex="-1">安装docker <a class="header-anchor" href="#安装docker" aria-label="Permalink to &quot;安装docker&quot;">​</a></h3><p>安装docker可以通过以下指令：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ sudo apt install docker.io</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>配置docker镜像源和代理：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ sudo vim /etc/docker/daemon.json</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/clash$ cat /etc/docker/daemon.json </span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;registry-mirrors&quot;: [&quot;https://uvx4zmco.mirror.aliyuncs.com&quot;],</span></span>
<span class="line"><span>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span>
<span class="line"><span>  &quot;proxies&quot;: {</span></span>
<span class="line"><span>    &quot;http-proxy&quot;: &quot;127.0.0.1:7890&quot;,</span></span>
<span class="line"><span>    &quot;https-proxy&quot;: &quot;127.0.0.1:7890&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>其中proxies部分是配置代理，如果无需代理可以去掉，但是最好能保证镜像可以下载。</p><p>执行以下指令重启docker：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ systemctl restart docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果用docker可以拉取下面这个镜像，后面就可以继续了。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ docker pull calico/pod2daemon-flexvol:v3.28.0</span></span>
<span class="line"><span>v3.28.0: Pulling from calico/pod2daemon-flexvol</span></span>
<span class="line"><span>Digest: sha256:2054fc9485e11bdde7ec8e22bca88bbf3a0f777f6c17509045a427294aa0a54b</span></span>
<span class="line"><span>Status: Image is up to date for calico/pod2daemon-flexvol:v3.28.0</span></span>
<span class="line"><span>docker.io/calico/pod2daemon-flexvol:v3.28.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意，默认执行docker需要管理管理员权限，执行以下指令解决这个问题</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo gpasswd -a \${USER} docker </span></span>
<span class="line"><span>sudo chmod a+rw /var/run/docker.sock</span></span>
<span class="line"><span>sudo systemctl restart docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="安装cri-docker" tabindex="-1">安装cri-docker <a class="header-anchor" href="#安装cri-docker" aria-label="Permalink to &quot;安装cri-docker&quot;">​</a></h3><p>k8s 1.24版本之后使用docker就要额外安装cri-docker了。上github查找cri-docker，下载对应的镜像，具体链接为：<a href="https://github.com/Mirantis/cri-dockerd/releases" target="_blank" rel="noreferrer">https://github.com/Mirantis/cri-dockerd/releases</a></p><p><img src="`+t+`" alt="cri-dockerd"></p><p>本机是ARM架构，选arm64的包，右键复制链接，在ubuntu里面执行：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.14/cri-dockerd-0.3.14.arm64.tgz</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ tar xf cri-dockerd-0.3.14.arm64.tgz</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ chmod a+x cri-dockerd/cri-dockerd</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ sudo mv cri-dockerd/cri-dockerd /usr/bin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>添加/usr/lib/systemd/system/cri-docker.service，/usr/lib/systemd/system/cri-docker.socket，这两个文件的模版可以从cri-docker的github上找到。</p><p><img src="`+u+`" alt="cri-docker.service"></p><p>复制即可。然后修改/usr/lib/system/system/cri-docker.service，找到ExecStart那行，将其改成</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后启动cri-dockerd，</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl enable --now cri-docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看状态, 如果状态是running，则表示成功</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ systemctl status cri-docker</span></span>
<span class="line"><span>● cri-docker.service - CRI Interface for Docker Application Container Engine</span></span>
<span class="line"><span>     Loaded: loaded (/usr/lib/systemd/system/cri-docker.service; enabled; preset: enabled)</span></span>
<span class="line"><span>     Active: active (running) since Thu 2024-07-04 18:35:41 CST; 3h 57min ago</span></span>
<span class="line"><span>TriggeredBy: ● cri-docker.socket</span></span>
<span class="line"><span>       Docs: https://docs.mirantis.com</span></span>
<span class="line"><span>   Main PID: 13976 (cri-dockerd)</span></span>
<span class="line"><span>      Tasks: 11</span></span>
<span class="line"><span>     Memory: 65.2M (peak: 136.6M)</span></span>
<span class="line"><span>        CPU: 3min 8.332s</span></span>
<span class="line"><span>     CGroup: /system.slice/cri-docker.service</span></span>
<span class="line"><span>             └─13976 /usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="安装k8s" tabindex="-1">安装k8s <a class="header-anchor" href="#安装k8s" aria-label="Permalink to &quot;安装k8s&quot;">​</a></h2><p>到了安装k8s的环节了，使用kubeadm来安装，这部分内容可以参考官网：<a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/%EF%BC%8C" target="_blank" rel="noreferrer">https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/，</a> 找到安装 kubeadm、kubelet 和 kubectl部分步骤。以下是操作步骤：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get update</span></span>
<span class="line"><span>sudo apt-get install -y apt-transport-https ca-certificates curl gpg</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果 \`/etc/apt/keyrings\` 目录不存在，则应在 curl 命令之前创建它，请阅读下面的注释。</span></span>
<span class="line"><span># sudo mkdir -p -m 755 /etc/apt/keyrings</span></span>
<span class="line"><span>curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo &#39;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /&#39; | sudo tee /etc/apt/sources.list.d/kubernetes.list</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sudo apt-get update</span></span>
<span class="line"><span>sudo apt-get install -y kubelet kubeadm kubectl</span></span>
<span class="line"><span>sudo apt-mark hold kubelet kubeadm kubectl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>配置kubelet</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 没有sysconfig目录要先创建</span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ vim /etc/sysconfig/kubelet</span></span>
<span class="line"><span>KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ubuntu@ubuntu200:~$ systemctl enable kubelet #可以不执行，后面初始化kubeadm会启动</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="master安装配置" tabindex="-1">Master安装配置 <a class="header-anchor" href="#master安装配置" aria-label="Permalink to &quot;Master安装配置&quot;">​</a></h2><ul><li>生成kubeadm配置文件</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubeadm config print init-defaults &gt; kubeadm-config.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>修改配置文件</li></ul><p><img src="`+b+`" alt="kubeadm-config"></p><p>修改kubeadm.config.yaml文件，主要修改红款部分，以下给个示例</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>apiVersion: kubeadm.k8s.io/v1beta3</span></span>
<span class="line"><span>bootstrapTokens:</span></span>
<span class="line"><span>- groups:</span></span>
<span class="line"><span>  - system:bootstrappers:kubeadm:default-node-token</span></span>
<span class="line"><span>  token: abcdef.0123456789abcdef</span></span>
<span class="line"><span>  ttl: 24h0m0s</span></span>
<span class="line"><span>  usages:</span></span>
<span class="line"><span>  - signing</span></span>
<span class="line"><span>  - authentication</span></span>
<span class="line"><span>kind: InitConfiguration</span></span>
<span class="line"><span>localAPIEndpoint:</span></span>
<span class="line"><span>  advertiseAddress: 192.168.147.200</span></span>
<span class="line"><span>  bindPort: 6443</span></span>
<span class="line"><span>nodeRegistration:</span></span>
<span class="line"><span>  criSocket: unix:///var/run/cri-dockerd.sock  #cri-docker的socket文件</span></span>
<span class="line"><span>  imagePullPolicy: IfNotPresent</span></span>
<span class="line"><span>  name: ubuntu200 # 主机名字</span></span>
<span class="line"><span>  taints: null</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>apiServer:</span></span>
<span class="line"><span>  timeoutForControlPlane: 4m0s</span></span>
<span class="line"><span>apiVersion: kubeadm.k8s.io/v1beta3</span></span>
<span class="line"><span>certificatesDir: /etc/kubernetes/pki</span></span>
<span class="line"><span>clusterName: kubernetes</span></span>
<span class="line"><span>controllerManager: {}</span></span>
<span class="line"><span>dns: {}</span></span>
<span class="line"><span>etcd:</span></span>
<span class="line"><span>  local:</span></span>
<span class="line"><span>    dataDir: /var/lib/etcd</span></span>
<span class="line"><span>imageRepository: registry.aliyuncs.com/google_containers # 镜像仓库</span></span>
<span class="line"><span>kind: ClusterConfiguration</span></span>
<span class="line"><span>kubernetesVersion: 1.30.0</span></span>
<span class="line"><span>networking:</span></span>
<span class="line"><span>  dnsDomain: cluster.local</span></span>
<span class="line"><span>  serviceSubnet: 10.96.0.0/12</span></span>
<span class="line"><span>  podSubnet: 10.244.0.0/16 // Pod子网</span></span>
<span class="line"><span>scheduler: {}</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>kind: KubeletConfiguration</span></span>
<span class="line"><span>apiVersion: kubelet.config.k8s.io/v1beta1</span></span>
<span class="line"><span>cgroupDriver: systemd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>初始化kubeadm, 看到下面日志则说明初始化成功</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ sudo kubeadm init --config kubeadm-config.yaml</span></span>
<span class="line"><span>.....</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Your Kubernetes control-plane has initialized successfully!</span></span>
<span class="line"><span></span></span>
<span class="line"><span>To start using your cluster, you need to run the following as a regular user:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  mkdir -p $HOME/.kube</span></span>
<span class="line"><span>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span>
<span class="line"><span>  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Alternatively, if you are the root user, you can run:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  export KUBECONFIG=/etc/kubernetes/admin.conf</span></span>
<span class="line"><span></span></span>
<span class="line"><span>You should now deploy a pod network to the cluster.</span></span>
<span class="line"><span>Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span></span>
<span class="line"><span>  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Then you can join any number of worker nodes by running the following on each as root:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>kubeadm join 192.168.147.200:6443 --token abcdef.0123456789abcdef \\</span></span>
<span class="line"><span>	--discovery-token-ca-cert-hash sha256:ab2d3b2a6d864383d9ce59762ce8d3d1f89baf258d63f154967f609efd8a1cc6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>初始化集群，即上面命令行部分：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$  mkdir -p $HOME/.kube</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>查看节点</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get nodes</span></span>
<span class="line"><span>NAME        STATUS     ROLES           AGE     VERSION</span></span>
<span class="line"><span>ubuntu200   NotReady   control-plane   2m15s   v1.30.2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>PS：如果上面的token丢了，或者过期了，可以通过下面指令重新生成</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo kubeadm token create --print-join-command</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="worker安装配置" tabindex="-1">Worker安装配置 <a class="header-anchor" href="#worker安装配置" aria-label="Permalink to &quot;Worker安装配置&quot;">​</a></h2><p>由于是用虚拟机搭建的ubuntu，所以直接基于《master安装配置》后的时间节点重新克隆出来一个虚拟机。本来想基于《安装k8s》结束的时间点做克隆的，但是在kubeadm join后kubelet的状态一直有问题，查不出原因，所以给于master安装完成的时间点来做。</p><ul><li>修改域名</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu1801:~$ sudo cat /etc/netplan/50-cloud-init.yaml </span></span>
<span class="line"><span># This file is generated from information provided by the datasource.  Changes</span></span>
<span class="line"><span># to it will not persist across an instance reboot.  To disable cloud-init&#39;s</span></span>
<span class="line"><span># network configuration capabilities, write a file</span></span>
<span class="line"><span># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span>
<span class="line"><span># network: {config: disabled}</span></span>
<span class="line"><span>network:</span></span>
<span class="line"><span>    ethernets:</span></span>
<span class="line"><span>        ens160:</span></span>
<span class="line"><span>            dhcp4: false</span></span>
<span class="line"><span>            addresses: </span></span>
<span class="line"><span>              - 192.168.147.201/24</span></span>
<span class="line"><span>            nameservers:</span></span>
<span class="line"><span>              addresses: [119.29.29.29, 114.114.114.114, 8.8.8.8]</span></span>
<span class="line"><span>            routes:</span></span>
<span class="line"><span>              - to: default</span></span>
<span class="line"><span>                via: 192.168.147.2     </span></span>
<span class="line"><span>    version: 2</span></span>
<span class="line"><span>ubuntu@ubuntu1801:~$ sudo netplan apply</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>修改主机名</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~$ hostnamectl set-hostname ubuntu201</span></span>
<span class="line"><span>==== AUTHENTICATING FOR org.freedesktop.hostname1.set-static-hostname ====</span></span>
<span class="line"><span>Authentication is required to set the statically configured local hostname, as well as the pretty hostname.</span></span>
<span class="line"><span>Authenticating as: ubuntu</span></span>
<span class="line"><span>Password:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>修改hosts文件</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu201:~$ cat /etc/hosts</span></span>
<span class="line"><span>127.0.0.1 localhost</span></span>
<span class="line"><span>127.0.1.1 ubuntu201</span></span>
<span class="line"><span>192.168.147.200 ubuntu200</span></span>
<span class="line"><span>192.168.147.201 ubuntu201</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># The following lines are desirable for IPv6 capable hosts</span></span>
<span class="line"><span>::1     ip6-localhost ip6-loopback</span></span>
<span class="line"><span>fe00::0 ip6-localnet</span></span>
<span class="line"><span>ff00::0 ip6-mcastprefix</span></span>
<span class="line"><span>ff02::1 ip6-allnodes</span></span>
<span class="line"><span>ff02::2 ip6-allrouters</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>关掉之前matser的kubeadm</li></ul><p>确保docker，cri-docker， clash（如使用clash）已经运行。没有的话，参照前面的重新开启。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu201:~/k8s$ curl -I ww.google.com</span></span>
<span class="line"><span>HTTP/1.1 302 Found</span></span>
<span class="line"><span>Content-Length: 220</span></span>
<span class="line"><span>Cache-Control: private</span></span>
<span class="line"><span>Connection: keep-alive</span></span>
<span class="line"><span>Content-Type: text/html; charset=UTF-8</span></span>
<span class="line"><span>Cross-Origin-Resource-Policy: cross-origin</span></span>
<span class="line"><span>Date: Fri, 05 Jul 2024 08:08:56 GMT</span></span>
<span class="line"><span>Keep-Alive: timeout=4</span></span>
<span class="line"><span>Location: https://www.google.com/</span></span>
<span class="line"><span>Proxy-Connection: keep-alive</span></span>
<span class="line"><span>Server: sffe</span></span>
<span class="line"><span>X-Content-Type-Options: nosniff</span></span>
<span class="line"><span>X-Xss-Protection: 0</span></span>
<span class="line"><span>ubuntu@ubuntu201:~/k8s$ systemctl is-active docker cri-docker</span></span>
<span class="line"><span>active</span></span>
<span class="line"><span>active</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>重置kubeadm</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu201:~/k8s$ sudo kubeadm reset --cri-socket unix:///var/run/cri-dockerd.sock</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>加入集群</li></ul><p>复制上面master初始化时候后面生成的kubeadm join命令</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu201:~/k8s$ sudo kubeadm join 192.168.147.200:6443 --token abcdef.0123456789abcdef  --discovery-token-ca-cert-hash sha256:ab2d3b2a6d864383d9ce59762ce8d3d1f89baf258d63f154967f609efd8a1cc6 --cri-socket unix:///var/run/cri-dockerd.sock</span></span>
<span class="line"><span>[preflight] Running pre-flight checks</span></span>
<span class="line"><span>[preflight] Reading configuration from the cluster...</span></span>
<span class="line"><span>[preflight] FYI: You can look at this config file with &#39;kubectl -n kube-system get cm kubeadm-config -o yaml&#39;</span></span>
<span class="line"><span>[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span></span>
<span class="line"><span>[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span>
<span class="line"><span>[kubelet-start] Starting the kubelet</span></span>
<span class="line"><span>[kubelet-check] Waiting for a healthy kubelet. This can take up to 4m0s</span></span>
<span class="line"><span>[kubelet-check] The kubelet is healthy after 512.348954ms</span></span>
<span class="line"><span>[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This node has joined the cluster:</span></span>
<span class="line"><span>* Certificate signing request was sent to apiserver and a response was received.</span></span>
<span class="line"><span>* The Kubelet was informed of the new secure connection details.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Run &#39;kubectl get nodes&#39; on the control-plane to see this node join the cluster.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>回到master，查看节点</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get nodes</span></span>
<span class="line"><span>NAME        STATUS        ROLES         AGE   VERSION</span></span>
<span class="line"><span>ubuntu200   NotReady    control-plane   19h   v1.30.2</span></span>
<span class="line"><span>ubuntu201   NotReady    &lt;none&gt;          16m   v1.30.2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="安装calico网络插件-master" tabindex="-1">安装Calico网络插件（master） <a class="header-anchor" href="#安装calico网络插件-master" aria-label="Permalink to &quot;安装Calico网络插件（master）&quot;">​</a></h3><p>可以看到上面ubuntu200的STATUS为NotReady，这时需要安装CNI网络插件，可以使用Calico，也可以使用flannel，这里采用CaliCo。</p><p>进入Calico的官网：<a href="https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart" target="_blank" rel="noreferrer">https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart</a></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>等待安装完成。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get ns</span></span>
<span class="line"><span>NAME              STATUS   AGE</span></span>
<span class="line"><span>default           Active   14m</span></span>
<span class="line"><span>kube-node-lease   Active   14m</span></span>
<span class="line"><span>kube-public       Active   14m</span></span>
<span class="line"><span>kube-system       Active   14m</span></span>
<span class="line"><span>tigera-operator   Active   24s</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get pods -n tigera-operator</span></span>
<span class="line"><span>NAME                               READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span>tigera-operator-6678f5cb9d-br2g5   1/1     Running   0          61s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>由于前面kubeadm配置的pod为10.244.0.0/16，所以需要先将calico的配置文件下载下来：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ wget https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>修改custom-resources.yaml如下所示：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ cat custom-resources.yaml </span></span>
<span class="line"><span># This section includes base Calico installation configuration.</span></span>
<span class="line"><span># For more information, see: https://docs.tigera.io/calico/latest/reference/installation/api#operator.tigera.io/v1.Installation</span></span>
<span class="line"><span>apiVersion: operator.tigera.io/v1</span></span>
<span class="line"><span>kind: Installation</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: default</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  # Configures Calico networking.</span></span>
<span class="line"><span>  calicoNetwork:</span></span>
<span class="line"><span>    ipPools:</span></span>
<span class="line"><span>    - name: default-ipv4-ippool</span></span>
<span class="line"><span>      blockSize: 26</span></span>
<span class="line"><span>      cidr: 10.244.0.0/16 # 只改这个</span></span>
<span class="line"><span>      encapsulation: VXLANCrossSubnet</span></span>
<span class="line"><span>      natOutgoing: Enabled</span></span>
<span class="line"><span>      nodeSelector: all()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span># This section configures the Calico API server.</span></span>
<span class="line"><span># For more information, see: https://docs.tigera.io/calico/latest/reference/installation/api#operator.tigera.io/v1.APIServer</span></span>
<span class="line"><span>apiVersion: operator.tigera.io/v1</span></span>
<span class="line"><span>kind: APIServer</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: default</span></span>
<span class="line"><span>spec: {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>然后安装calico</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl create -f custom-resources.yaml </span></span>
<span class="line"><span>installation.operator.tigera.io/default created</span></span>
<span class="line"><span>apiserver.operator.tigera.io/default created</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>等待相关镜像安装完毕即可，此处目前没翻墙的话，找不到好的解决方法。有人说可以在别处下载好镜像，然后安装回来就好了，但是由于本机是ARM架构，镜像貌似用不了，所以建议一劳永逸还是安装科学上网工具为好</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get pods -n calico-system</span></span>
<span class="line"><span>NAME                                       READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span>calico-kube-controllers-555b6c48db-bxdsq   1/1     Running   0          177m</span></span>
<span class="line"><span>calico-node-lqg9z                          1/1     Running   0          177m</span></span>
<span class="line"><span>calico-typha-bb5fbd67f-qsfh5               1/1     Running   0          177m</span></span>
<span class="line"><span>csi-node-driver-wwjg2                      2/2     Running   0          177m</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>查看kube-system状态</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get pods -n kube-system</span></span>
<span class="line"><span>NAME                                READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span>coredns-7b5944fdcf-kbjlg            1/1     Running   0          10m</span></span>
<span class="line"><span>coredns-7b5944fdcf-qv29m            1/1     Running   0          10m</span></span>
<span class="line"><span>etcd-ubuntu200                      1/1     Running   0          10m</span></span>
<span class="line"><span>kube-apiserver-ubuntu200            1/1     Running   0          10m</span></span>
<span class="line"><span>kube-controller-manager-ubuntu200   1/1     Running   0          10m</span></span>
<span class="line"><span>kube-proxy-bb4qc                    1/1     Running   0          10m</span></span>
<span class="line"><span>kube-scheduler-ubuntu200            1/1     Running   0          10m</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get nodes</span></span>
<span class="line"><span>NAME        STATUS   ROLES           AGE   VERSION</span></span>
<span class="line"><span>ubuntu200   Ready    control-plane   19h   v1.30.2</span></span>
<span class="line"><span>ubuntu201   Ready    &lt;none&gt;          16m   v1.30.2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>至此，节点初始化完成。</p><h2 id="部署nginx" tabindex="-1">部署nginx <a class="header-anchor" href="#部署nginx" aria-label="Permalink to &quot;部署nginx&quot;">​</a></h2><p>下面部署一个nginx来验证集群的功能</p><p>在k8s目录里面创建一个nginx.yaml，在文件里面写入下面内容。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ cat nginx.yaml </span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>apiVersion: apps/v1</span></span>
<span class="line"><span>kind: Deployment</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: nginxweb</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    matchLabels:</span></span>
<span class="line"><span>      app: nginxweb1</span></span>
<span class="line"><span>  replicas: 2</span></span>
<span class="line"><span>  template:</span></span>
<span class="line"><span>    metadata:</span></span>
<span class="line"><span>      labels:</span></span>
<span class="line"><span>        app: nginxweb1</span></span>
<span class="line"><span>    spec:</span></span>
<span class="line"><span>      containers:</span></span>
<span class="line"><span>        - name: nginxwebc</span></span>
<span class="line"><span>          image: nginx:latest</span></span>
<span class="line"><span>          imagePullPolicy: IfNotPresent</span></span>
<span class="line"><span>          ports:</span></span>
<span class="line"><span>            - containerPort: 80</span></span>
<span class="line"><span></span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>apiVersion: v1</span></span>
<span class="line"><span>kind: Service</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: nginxweb-service</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  externalTrafficPolicy: Cluster</span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    app: nginxweb1</span></span>
<span class="line"><span>  ports:</span></span>
<span class="line"><span>    - protocol: TCP</span></span>
<span class="line"><span>      port: 80</span></span>
<span class="line"><span>      targetPort: 80</span></span>
<span class="line"><span>      nodePort: 30080</span></span>
<span class="line"><span>  type: NodePort</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>运行</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl apply -f nginx.yaml</span></span>
<span class="line"><span>deployment.apps/nginxweb created</span></span>
<span class="line"><span>service/nginxweb-service created</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get pods</span></span>
<span class="line"><span>NAME                        READY   STATUS              RESTARTS   AGE</span></span>
<span class="line"><span>nginxweb-55dcdbb446-ptkrw   0/1     ContainerCreating   0          8s</span></span>
<span class="line"><span>nginxweb-55dcdbb446-qddpv   0/1     ContainerCreating   0          8s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>等待nginx安装完成</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get pods</span></span>
<span class="line"><span>NAME                        READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span>nginxweb-55dcdbb446-ptkrw   1/1     Running   0          65s</span></span>
<span class="line"><span>nginxweb-55dcdbb446-qddpv   1/1     Running   0          65s</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get deployment</span></span>
<span class="line"><span>NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span></span>
<span class="line"><span>nginxweb   2/2     2            2           77s</span></span>
<span class="line"><span>ubuntu@ubuntu200:~/k8s$ kubectl get svc</span></span>
<span class="line"><span>NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span></span>
<span class="line"><span>kubernetes         ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        20h</span></span>
<span class="line"><span>nginxweb-service   NodePort    10.96.161.163   &lt;none&gt;        80:30080/TCP   83s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可见，nginx的80端口映射到master的30080端口，访问<a href="http://192.168.147.200:30080/" target="_blank" rel="noreferrer">http://192.168.147.200:30080/</a></p><p><img src="`+o+'" alt="nginx"></p><p>至此，k8s集群初始化完成</p><h2 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h2><p>如果是用containerd来部署k8s, 参照这篇博客即可：</p><p><a href="https://www.augensten.online/655061ae/index.html" target="_blank" rel="noreferrer">https://www.augensten.online/655061ae/index.html</a></p><p>containerd使用代理，参照这篇博客：</p><p><a href="https://juejin.cn/post/7166794699586404388" target="_blank" rel="noreferrer">https://juejin.cn/post/7166794699586404388</a></p><p>如果想启用kubectl的自动补全功能，参考这篇博客即可：</p><p><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion" target="_blank" rel="noreferrer">https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion</a></p>',174)]))}const x=n(d,[["render",m]]);export{C as __pageData,x as default};
