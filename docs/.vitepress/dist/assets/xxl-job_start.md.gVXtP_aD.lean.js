import{_ as s,a as e,b as n}from"./chunks/xxl-job-sample-task.DMqhNKwt.js";import{_ as l,c as o,a0 as p,o as t}from"./chunks/framework.P9qPzDnn.js";const i="/assets/new-project.CyVyMm6B.png",r="/assets/git-url.BeO7xM4A.png",c="/assets/mysql-script.q7wjMC1y.png",x="/assets/xxl-job-table.0oZOLDtY.png",b="/assets/xxl-job-executor-log.BvSxWky3.png",d="/assets/xxl-job-sample-task-detail.D1b2QxPV.png",y=JSON.parse('{"title":"源码环境搭建","description":"","frontmatter":{},"headers":[],"relativePath":"xxl-job/start.md","filePath":"xxl-job/start.md"}'),h={name:"xxl-job/start.md"};function m(g,a,u,j,k,v){return t(),o("div",null,a[0]||(a[0]=[p('<h1 id="源码环境搭建" tabindex="-1">源码环境搭建 <a class="header-anchor" href="#源码环境搭建" aria-label="Permalink to &quot;源码环境搭建&quot;">​</a></h1><p>关于xxl-job的介绍这里就简单的介绍一下，需要详细资料的可以直接查看<a href="https://www.xuxueli.comignoreDeadLinks.html" target="_blank" rel="noreferrer">官网</a>。</p><p>XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。这里主要说一下quartz的不足吧。</p><ul><li>调用API的的方式操作任务，不人性化；</li><li>需要持久化业务QuartzJobBean到底层数据表中，系统侵入性相当严重。</li><li>调度逻辑和QuartzJobBean耦合在同一个项目中，这将导致一个问题，在调度任务数量逐渐增多，同时调度任务逻辑逐渐加重的情况下，此时调度系统的性能将大大受限于业务；</li><li>quartz底层以“抢占式”获取DB锁并由抢占成功节点负责运行任务，会导致节点负载悬殊非常大；而XXL-JOB通过执行器实现“协同分配式”运行任务，充分发挥集群优势，负载各节点均衡。</li></ul><p>可以认为xxl-job就是一个加强版加分布式的quartz定时调度器。</p><h2 id="克隆项目" tabindex="-1">克隆项目 <a class="header-anchor" href="#克隆项目" aria-label="Permalink to &quot;克隆项目&quot;">​</a></h2><p>启动IDEA，新建项目, 选择来自版本控制的项目。</p><img src="'+i+'" width="500" alt="new-project"><p>在URL里面输入xxl-job的github地址，<a href="https://github.com/xuxueli/xxl-job" target="_blank" rel="noreferrer">https://github.com/xuxueli/xxl-job</a> ，如果访问不了github，也可以使用github代理镜像在前面加上 <a href="https://mirror.ghproxy.com" target="_blank" rel="noreferrer">https://mirror.ghproxy.com</a></p><img src="'+r+`" width="500" alt="git-url"><p>等待项目打开，Maven构建完成。然后打开文件-&gt;项目结构，将里面的模块的SDK配置位JAVA8。</p><p>这里介绍一下xxl-job的源码路径结构。可以看到主要核心目录是xxl-job-admin和xxl-job-core</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>shengduiliang@liangshengduideMac-mini xxl-job % tree -L 1</span></span>
<span class="line"><span>.</span></span>
<span class="line"><span>├── LICENSE</span></span>
<span class="line"><span>├── NOTICE</span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>├── doc   // xxl-job的资源文件，如数据库初始化脚本，架构设计说明等。</span></span>
<span class="line"><span>├── pom.xml</span></span>
<span class="line"><span>├── xxl-job-admin  // 控制台项目，即xxl-job的网页端</span></span>
<span class="line"><span>├── xxl-job-core   // xxl-job的核心代码</span></span>
<span class="line"><span>└── xxl-job-executor-samples // xxl-job的示例代码文件</span></span></code></pre></div><h2 id="启动xxl-job-admin" tabindex="-1">启动xxl-job-admin <a class="header-anchor" href="#启动xxl-job-admin" aria-label="Permalink to &quot;启动xxl-job-admin&quot;">​</a></h2><p>要启动xxl-job，主要是启动xxl-job-admin项目，这里介绍启动步骤。</p><h3 id="初始化数据库" tabindex="-1">初始化数据库 <a class="header-anchor" href="#初始化数据库" aria-label="Permalink to &quot;初始化数据库&quot;">​</a></h3><p>先在本地搭建一个mysql数据库，这个不是本篇文章的重点，有了数据库之后，把xxl-job依赖的数据库以及相关的表创建出来。数据库脚本在/db/tables_xxl_job.sql，在mysql数据库里面执行这个脚本即可。这里介绍一个IDEA的Mysql插件。在IDEA右边的栏目，选择mysql数据源，直接运行脚本，选中sql脚本即可。</p><p><img src="`+c+'" alt="导入脚本"></p><p>运行成功后，可以看到xxl-job数据库下多了8个表，后面会介绍这些表的用处</p><img src="'+x+`" width="500" alt="xxl-job-table"><h3 id="修改运行配置" tabindex="-1">修改运行配置 <a class="header-anchor" href="#修改运行配置" aria-label="Permalink to &quot;修改运行配置&quot;">​</a></h3><p>主要有两个配置需要修改，一个是mysql数据库的配置，还有一个是日志打印的文件。</p><p><strong>mysql数据库</strong></p><p>打开xxl-job-admin项目，找到application.properties文件，将mysql修改为上面mysql的地址即可，我这里配置的地址是159.75.179.234, 具体代码如下所示。</p><div class="language-application.properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">application.properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>### xxl-job, datasource</span></span>
<span class="line"><span>spring.datasource.url=jdbc:mysql://159.75.179.234:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span>
<span class="line"><span>spring.datasource.username=******</span></span>
<span class="line"><span>spring.datasource.password=******</span></span>
<span class="line"><span>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span></span></code></pre></div><p>注意username跟password要跟数据库的一样。</p><p><strong>日志配置文件</strong></p><p>打开xxl-job-admin项目，打开logback.xml文件，配置日志文件的打印文件路径。</p><div class="language-logback.xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">logback.xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;property name=&quot;log.path&quot; value=&quot;/Users/shengduiliang/Desktop/projects/xxl-job/data/applogs/xxl-job/xxl-job-admin.log&quot;/&gt;</span></span></code></pre></div><p>主要修改这个，这里将日志输出文件修改为xxl-job项目下的data/applogs/xxl-job/xxl-job-admin.log</p><h3 id="启动项目" tabindex="-1">启动项目 <a class="header-anchor" href="#启动项目" aria-label="Permalink to &quot;启动项目&quot;">​</a></h3><p>到这里为止，可以启动xxl-job-admin项目了，找到项目下的XxlJobAdminApplication，直接点击运行即可，当看到下面的日志打印，说明启动成功。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>20:41:39.543 logback [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path &#39;/xxl-job-admin&#39;</span></span>
<span class="line"><span>20:41:39.549 logback [main] INFO  c.x.job.admin.XxlJobAdminApplication - Started XxlJobAdminApplication in 0.942 seconds (JVM running for 1.149)</span></span>
<span class="line"><span>20:41:39.601 logback [xxl-job, admin JobFailMonitorHelper] INFO  com.zaxxer.hikari.HikariDataSource - HikariCP - Start completed.</span></span></code></pre></div><p>在浏览器中访问<a href="http://localhost:8080/xxl-job-admin/" target="_blank" rel="noreferrer">http://localhost:8080/xxl-job-admin/</a> ，进入管理台网页。</p><p><img src="`+s+`" alt="xxl-job-admin"></p><h2 id="启动xxl-job-executor-samples" tabindex="-1">启动xxl-job-executor-samples <a class="header-anchor" href="#启动xxl-job-executor-samples" aria-label="Permalink to &quot;启动xxl-job-executor-samples&quot;">​</a></h2><p>xxl-job-executor-samples目录给我们提供了两个示例项目，由于spring-boot用的比较多，所以这里使用xxl-job-executor-sample-springboot。</p><p>当前项目只要修改两个关于日志文件打印的地方。</p><p><strong>application.properties</strong></p><p>修改executor的log打印目录，具体修改如下，可以按照自己的项目路径修改：</p><div class="language-application.properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">application.properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xxl.job.executor.logpath=/Users/shengduiliang/Desktop/projects/xxl-job/data/applogs/xxl-job/jobhandler</span></span></code></pre></div><p><strong>logback.xml</strong></p><p>修改log.path的路径，具体修改如下，可以按照自己的项目路径修改：</p><div class="language-logback.xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">logback.xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;property name=&quot;log.path&quot; value=&quot;/Users/shengduiliang/Desktop/projects/xxl-job/data/applogs/xxl-job/xxl-job-executor-sample-springboot.log&quot;/&gt;</span></span></code></pre></div><p>找到xxl-job-executor-sample-springboot路径下的XxlJobExecutorApplication，点击运行即可，当看到下面的日志打印，说明启动成功。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>20:47:46.020 logback [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 8081 (http) with context path &#39;&#39;</span></span>
<span class="line"><span>20:47:46.051 logback [main] INFO  c.x.j.e.XxlJobExecutorApplication - Started XxlJobExecutorApplication in 0.598 seconds (JVM running for 1.115)</span></span>
<span class="line"><span>20:47:46.073 logback [Thread-5] INFO  com.xxl.job.core.server.EmbedServer - &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job remoting server start success, nettype = class com.xxl.job.core.server.EmbedServer, port = 9999</span></span></code></pre></div><h2 id="定时任务执行" tabindex="-1">定时任务执行 <a class="header-anchor" href="#定时任务执行" aria-label="Permalink to &quot;定时任务执行&quot;">​</a></h2><p>这个时候我们上控制台查看，点击执行器管理，可以看到新增了xxl-job-executor-sample的执行器。</p><p><img src="`+e+'" alt="xxl-job-executor-sample-executer.png"></p><p>查看任务管理，可以看到xxl-job默认给我们生成了一个测试任务1。</p><p><img src="'+n+'" alt="xxl-job-sample-task"></p><p>点击操作右边的向下的按钮，然后点击执行一次，控制台弹出执行一次成功的提示。</p><p>点击调度日志，可以看到多出来了一个任务调度日志。</p><p><img src="'+b+`" alt="xxl-job-executor-log"></p><p>点击操作右边的向下按钮, 点击查看执行日志，跳转新页面，可以看到执行日志。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2025-01-07 21:57:44 [com.xxl.job.core.thread.JobThread#run]-[133]-[xxl-job, JobThread-1-1736258207167] &lt;br&gt;----------- xxl-job job execute start -----------&lt;br&gt;----------- Param:</span></span>
<span class="line"><span>2025-01-07 21:57:44 [com.xxl.job.executor.service.jobhandler.SampleXxlJob#demoJobHandler]-[39]-[xxl-job, JobThread-1-1736258207167] XXL-JOB, Hello World.</span></span>
<span class="line"><span>2025-01-07 21:57:44 [com.xxl.job.executor.service.jobhandler.SampleXxlJob#demoJobHandler]-[42]-[xxl-job, JobThread-1-1736258207167] beat at:0</span></span>
<span class="line"><span>2025-01-07 21:57:46 [com.xxl.job.executor.service.jobhandler.SampleXxlJob#demoJobHandler]-[42]-[xxl-job, JobThread-1-1736258207167] beat at:1</span></span>
<span class="line"><span>2025-01-07 21:57:48 [com.xxl.job.executor.service.jobhandler.SampleXxlJob#demoJobHandler]-[42]-[xxl-job, JobThread-1-1736258207167] beat at:2</span></span>
<span class="line"><span>2025-01-07 21:57:50 [com.xxl.job.executor.service.jobhandler.SampleXxlJob#demoJobHandler]-[42]-[xxl-job, JobThread-1-1736258207167] beat at:3</span></span>
<span class="line"><span>2025-01-07 21:57:52 [com.xxl.job.executor.service.jobhandler.SampleXxlJob#demoJobHandler]-[42]-[xxl-job, JobThread-1-1736258207167] beat at:4</span></span>
<span class="line"><span>2025-01-07 21:57:54 [com.xxl.job.core.thread.JobThread#run]-[179]-[xxl-job, JobThread-1-1736258207167] &lt;br&gt;----------- xxl-job job execute end(finish) -----------&lt;br&gt;----------- Result: handleCode=200, handleMsg = null</span></span>
<span class="line"><span>2025-01-07 21:57:54 [com.xxl.job.core.thread.TriggerCallbackThread#callbackLog]-[197]-[xxl-job, executor TriggerCallbackThread] &lt;br&gt;----------- xxl-job job callback finish.</span></span></code></pre></div><h2 id="源码分析" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析" aria-label="Permalink to &quot;源码分析&quot;">​</a></h2><p>这里简单分析一下上节定时任务执行的流程。在控制台上，我们点击测试任务1的操作按钮右边向下的按钮，点击编辑，可以查看测试任务1的具体细节。</p><p><img src="`+d+`" alt="xxl-job-sample-task-detail"></p><p>可以看到JobHandler指定了一个demoJobHandler，这个就是具体执行的方法。</p><p>我们直接回看xxl-job-executor-sample-springboot的SampleXxlJob, 里面有一个demoJobHandler的handler，具体如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>public class SampleXxlJob {</span></span>
<span class="line"><span>  @XxlJob(&quot;demoJobHandler&quot;)</span></span>
<span class="line"><span>  public void demoJobHandler() throws Exception {</span></span>
<span class="line"><span>    XxlJobHelper.log(&quot;XXL-JOB, Hello World.&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for (int i = 0; i &lt; 5; i++) {</span></span>
<span class="line"><span>        XxlJobHelper.log(&quot;beat at:&quot; + i);</span></span>
<span class="line"><span>        TimeUnit.SECONDS.sleep(2);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    // default success</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在XxlJobHelper.log(&quot;XXL-JOB, Hello World.&quot;);加上断点，在执行测试任务1的时候，可以发现断点会卡在这里，运行没有问题。</p>`,63)]))}const _=l(h,[["render",m]]);export{y as __pageData,_ as default};
